{"version":3,"sources":["Components/Lister/Header/Title.js","Components/Lister/Menu/Facets.js","Components/Lister/Menu/RegionFacetGroups.js","Components/Lister/Menu/CompletionStatusFacetGroups.js","Components/Lister/Menu/DoneButton.js","Components/Lister/Menu/Menu.js","Components/Lister/Header/Search.js","Components/Lister/Header/BackButton.js","Components/Lister/Header/Sort.js","Components/Lister/Header/Header.js","Components/Lister/Footer/Footer.js","State/State.js","Components/Lister/ListView/ListView.js","Components/HomePage/HomePage.js","Components/PDP/MountainPage.js","App.js","reportWebVitals.js","index.js"],"names":["Title","title","className","defaultProps","Facets","name","useState","ticked","setTicked","onClick","state","classnames","alt","RegionFacetGroups","regions","showFacets","setShowFacets","containerRef","useRef","facetRef","useEffect","facetHeight","current","getBoundingClientRect","height","style","ref","map","region","index","CompletionStatusFacetGroups","DoneButton","mountains","setData","activeFilter","setActiveFilter","filter","document","querySelectorAll","filterArray","forEach","filterInnerText","innerText","firstElementChild","classList","contains","push","console","log","searchMountains","mountain","length","includes","complete","section","remove","Menu","Search","onKeyUp","e","searchString","target","value","toLowerCase","type","placeholder","minLength","required","BackButton","window","history","back","Sort","sort","Header","setSearchString","pathname","useLocation","isListerPage","closeFilter","addEventListener","htmlFor","onChange","sortOrder","result","a","b","difficulty","handleSort","Footer","date","Date","getFullYear","class","id","image","imageNumber","averageTime","climbers","startTime","ascentTime","summitTime","views","descentTime","endTime","totalWalkTime","ListView","handleLeftClick","handleRightClick","handleClickThrough","src","averagetime","newData","handleComplete","to","HomePage","MountainPage","selectedMountain","pdpMountain","handleClimbEvents","event","handleAscentDuration","handleDescentDuration","handleTotalWalkTime","newStartTime","newAscentDuration","summitTimeCalc","arr","split","convertNST","convertAD","measuredTime","setSeconds","final","toISOString","substr","slice","newSummitTime","newDescentDuration","finishTimeCalc","finishTimeString","totalWalkTimeCalc","totalWalkTimeString","App","filteredMountains","setFilteredMountains","setSelectedMountain","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c584cfe1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Title = ({ title }) => {\r\n  return <p className=\"title\"> {title}</p>;\r\n};\r\n\r\nTitle.defaultProps = {\r\n  title: \"Wainwright Tracker\",\r\n};\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport { FaCheck } from \"react-icons/fa\";\r\nimport { useState } from \"react\";\r\nimport classnames from \"classnames\";\r\n\r\nconst Facets = ({ name }) => {\r\n  const [ticked, setTicked] = useState(false);\r\n\r\n  //alternative for the classnames detailed below\r\n  // let classes ='fa-check';\r\n  // classes += ticked ? \" show-fa-check\" : \"\"\r\n\r\n  return (\r\n    //the below effectively toggles between what the state is at present. So, ticked would be not ticked and vice versa\r\n    <div\r\n      className=\"filter\"\r\n      onClick={() => {\r\n        setTicked((state) => !state);\r\n        // addToArray();\r\n      }}\r\n    >\r\n      <FaCheck\r\n        className={classnames(\"fa-check\", {\r\n          \"show-fa-check\": ticked === true,\r\n        })}\r\n        alt=\"filter ticked\"\r\n      />\r\n      <p>{name}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default Facets;\r\n","import { React, useRef, useState, useEffect } from \"react\";\r\nimport { FaChevronDown } from \"react-icons/fa\";\r\nimport Facets from \"./Facets\";\r\n\r\n//open / close filter drawer\r\nconst RegionFacetGroups = ({ name }) => {\r\n  const [regions, setRegions] = useState([\r\n    \"Central\",\r\n    \"Eastern\",\r\n    \"Far Eastern\",\r\n    \"Northern\",\r\n    \"Southern\",\r\n    \"Western\",\r\n  ]);\r\n  const [showFacets, setShowFacets] = useState(false);\r\n  const containerRef = useRef(null);\r\n  const facetRef = useRef(null);\r\n\r\n  // const openFilterDrawer = (e) => {\r\n  useEffect(() => {\r\n    const facetHeight = facetRef.current.getBoundingClientRect().height;\r\n    if (showFacets) {\r\n      containerRef.current.style.height = `${facetHeight}px`;\r\n    } else {\r\n      containerRef.current.style.height = \"0px\";\r\n    }\r\n  }, [showFacets]);\r\n\r\n  // const regionFacetGroup = <FacetGroups name=\"Region\" />;\r\n  // const completionStatusFacetGroup = <FacetGroups name=\"Completion Status\" />;\r\n  // console.log(regionFacetGroup.props.name === \"Region\");\r\n  // console.log(completionStatusFacetGroup);\r\n  //JS way of completing dynamic height work\r\n  // const filterGroup = document.querySelectorAll(\".filter-group\");\r\n  // const filterWrapper = document.querySelector(\".filter-wrapper\");\r\n  // const filterOptions = document.querySelector(\".filter-options\");\r\n  // const filterWrapperComplete = document.querySelector(\r\n  //   \".filter-wrapper-complete\"\r\n  // );\r\n  // const filterOptionsComplete = document.querySelector(\r\n  //   \".filter-options-complete\"\r\n  // );\r\n  // // console.log(e)\r\n\r\n  // const wrapperHeight = filterWrapper.getBoundingClientRect().height;\r\n  // const filterOptionsHeight = filterOptions.getBoundingClientRect().height;\r\n  // const wrapperHeightComplete =\r\n  //   filterWrapperComplete.getBoundingClientRect().height;\r\n  // const filterOptionsHeightComplete =\r\n  //   filterOptionsComplete.getBoundingClientRect().height;\r\n  // const element = e.currentTarget.classList;\r\n  // console.log(e.currentTarget.innerText, e);\r\n  // const addClass = e.currentTarget.innerText.split(\" \")[0];\r\n  // console.log(addClass);\r\n  // element.add(addClass);\r\n\r\n  // if (element.contains(\"Region\") && wrapperHeight === 0) {\r\n  //   filterWrapper.style.height = `${filterOptionsHeight}px`;\r\n  // } else if (element.contains(\"Region\") && filterWrapper.style.height !== 0) {\r\n  //   filterWrapper.style.height = 0;\r\n  // } else if (element.contains(\"Completion\") && wrapperHeightComplete === 0) {\r\n  //   filterWrapperComplete.style.height = `${filterOptionsHeightComplete}px`;\r\n  // } else {\r\n  //   filterWrapperComplete.style.height = 0;\r\n  // }\r\n  // };\r\n\r\n  return (\r\n    //look at using {facetgroup name = region to return below....do same for completion status}\r\n    <>\r\n      <div className=\"filter-group\" onClick={() => setShowFacets(!showFacets)}>\r\n        <p> {name} </p>\r\n        <FaChevronDown className=\"fa-chevron-down\" />\r\n      </div>\r\n      <div className=\"filter-wrapper\" ref={containerRef}>\r\n        <div className=\"filter-options\" ref={facetRef}>\r\n          {regions.map(\r\n            (region, index) => (\r\n              <Facets name={region} key={index} />\r\n            ) //returns component directly\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegionFacetGroups;\r\n","import { React, useRef, useState, useEffect } from \"react\";\r\nimport { FaChevronDown } from \"react-icons/fa\";\r\nimport Facets from \"./Facets\";\r\n\r\n//open / close filter drawer\r\nconst CompletionStatusFacetGroups = ({ name }) => {\r\n  const [showFacets, setShowFacets] = useState(false);\r\n  const containerRef = useRef(null);\r\n  const facetRef = useRef(null);\r\n\r\n  // const openFilterDrawer = (e) => {\r\n  useEffect(() => {\r\n    const facetHeight = facetRef.current.getBoundingClientRect().height;\r\n    if (showFacets) {\r\n      containerRef.current.style.height = `${facetHeight}px`;\r\n    } else {\r\n      containerRef.current.style.height = \"0px\";\r\n    }\r\n  }, [showFacets]);\r\n\r\n  return (\r\n    //look at using {facetgroup name = region to return below....do same for completion status}\r\n    <>\r\n      <div className=\"filter-group\" onClick={() => setShowFacets(!showFacets)}>\r\n        <p> {name} </p>\r\n        <FaChevronDown className=\"fa-chevron-down\" />\r\n      </div>\r\n      <div className=\"filter-wrapper-complete\" ref={containerRef}>\r\n        <div className=\"filter-options-complete\" ref={facetRef}>\r\n          <Facets name=\"Complete\" />\r\n          <Facets name=\"Not Complete\" />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompletionStatusFacetGroups;\r\n","import React from \"react\";\r\n\r\nconst DoneButton = ({ mountains, setData, activeFilter, setActiveFilter }) => {\r\n  const clickDone = () => {\r\n    // filter mountains based on ticks\r\n    const filter = document.querySelectorAll(\".filter\");\r\n    const filterArray = [];\r\n\r\n    filter.forEach((filter) => {\r\n      const filterInnerText = filter.innerText;\r\n      if (filter.firstElementChild.classList.contains(\"show-fa-check\")) {\r\n        filterArray.push(filterInnerText);\r\n      } else {\r\n        return;\r\n      }\r\n      console.log(filterArray);\r\n    });\r\n\r\n    const searchMountains = mountains.filter((mountain) => {\r\n      if (\r\n        filterArray.length === 0 ||\r\n        (filterArray.includes(\"Complete\") &&\r\n          filterArray.includes(\"Not Complete\"))\r\n      ) {\r\n        return mountains;\r\n      } else if (\r\n        filterArray.includes(mountain.region) &&\r\n        filterArray.includes(\"Not Complete\")\r\n      ) {\r\n        console.log(mountain);\r\n        return mountain;\r\n      } else if (filterArray.includes(mountain.region)) {\r\n        return mountain.region;\r\n      } else if (filterArray.includes(\"Complete\")) {\r\n        return mountain.complete === true;\r\n      } else if (filterArray.includes(\"Not Complete\")) {\r\n        return mountain.complete === false;\r\n      } //doesn't work\r\n\r\n      //need to cater for region and complete, region and not complete\r\n    });\r\n\r\n    //need to cater for region and complete, region and not complete\r\n\r\n    setData(searchMountains);\r\n    setActiveFilter(!activeFilter);\r\n    const section = document.querySelectorAll(\"section\");\r\n    section.forEach((section) => {\r\n      section.classList.remove(\"opaque-background\");\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"btn-container\" onClick={clickDone}>\r\n      <button className=\"done-btn\" alt=\"done button\">\r\n        Done\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoneButton;\r\n","// import Facets from \"./Facets\";\r\nimport React, { useState } from \"react\";\r\nimport RegionFacetGroups from \"./RegionFacetGroups\";\r\nimport CompletionStatusFacetGroups from \"./CompletionStatusFacetGroups\";\r\nimport DoneButton from \"./DoneButton\";\r\n\r\nconst Menu = ({ mountains, setData, activeFilter, setActiveFilter }) => {\r\n  // const [regions, setRegions] = useState([\r\n  //   \"Central\",\r\n  //   \"Eastern\",\r\n  //   \"Far Eastern\",\r\n  //   \"Northern\",\r\n  //   \"Southern\",\r\n  //   \"Western\",\r\n  // ]);\r\n\r\n  return (\r\n    <div\r\n      className={`filter-container ${\r\n        activeFilter ? \"show-filter-container\" : \"\"\r\n      }`}\r\n    >\r\n      <RegionFacetGroups name=\"Region\" />\r\n      <CompletionStatusFacetGroups name=\"Completion Status\" />\r\n      <DoneButton\r\n        mountains={mountains}\r\n        setData={setData}\r\n        activeFilter={activeFilter}\r\n        setActiveFilter={setActiveFilter}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import { FaSearch } from \"react-icons/fa\";\r\n\r\nconst Search = ({ mountains, setData }) => {\r\n  // const [searchString, setSearchString] = useState(\"\");\r\n\r\n  const handleFilter = (e) => {\r\n    //e.preventDefault();\r\n    // console.log(e);\r\n    const searchString = e.target.value.toLowerCase();\r\n    // setSearchString(e.target.value.toLowerCase());\r\n    console.log(searchString);\r\n    console.log(searchString.length);\r\n    const searchMountains = mountains.filter((mountain) => {\r\n      console.log(searchString.length);\r\n      if (searchString.length > 0) {\r\n        return mountain.name.toLowerCase().includes(searchString);\r\n      } else {\r\n        return mountains; //this functionality only works when you select enter. Not on keyUp\r\n      }\r\n    });\r\n    // console.log(searchMountains);\r\n    setData(searchMountains);\r\n  };\r\n\r\n  return (\r\n    <form className=\"search-form\">\r\n      <FaSearch className=\"fa-search\" />\r\n      <input\r\n        //onInput={(e) => setSearchString(e.target.value)}\r\n        onKeyUp={handleFilter}\r\n        className=\"input-field search\"\r\n        alt=\"search field\"\r\n        type=\"text\"\r\n        placeholder=\"Find Wainwright\"\r\n        name=\"search\"\r\n        minLength=\"1\"\r\n        required=\"\"\r\n        // value={searchString}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport { FaArrowLeft } from \"react-icons/fa\";\r\n\r\nconst BackButton = () => {\r\n  return (\r\n    <FaArrowLeft\r\n      onClick={() => {\r\n        window.history.back();\r\n      }}\r\n      alt=\"back to homepage\"\r\n      className=\"fa-arrow-left back-btn\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default BackButton;\r\n","import React from \"react\";\r\n\r\nconst Sort = ({ sort }) => {\r\n  return (\r\n    <option value={sort} alt={sort}>\r\n      {sort}\r\n    </option>\r\n  );\r\n};\r\n\r\nexport default Sort;\r\n","import React, { useState } from \"react\";\r\nimport Title from \"./Title\";\r\nimport Menu from \"../Menu/Menu\";\r\nimport Search from \"./Search\";\r\nimport { FaBars } from \"react-icons/fa\";\r\nimport BackButton from \"./BackButton\";\r\nimport Sort from \"./Sort\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst Header = ({\r\n  mountains,\r\n  setData,\r\n  activeFilter,\r\n  setActiveFilter,\r\n  searchString,\r\n  setSearchString,\r\n}) => {\r\n  const { pathname } = useLocation();\r\n  const isListerPage = pathname === \"/lister\";\r\n\r\n  const handleScroll = () => {\r\n    const navHeader = document.querySelector(\".nav-header\");\r\n    const secondNav = document.querySelector(\".second-nav\");\r\n    const nav = document.querySelector(\".nav\");\r\n    const scrollDepth = window.scrollY;\r\n    const secondNavHeight = secondNav.getBoundingClientRect().height;\r\n    // console.log(scrollDepth);\r\n\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n\r\n    //add sticky second nav when user scrolls up\r\n    if (this.oldScroll > this.scrollY && scrollDepth > 30) {\r\n      nav.classList.add(\"fixed-nav\");\r\n    } else {\r\n      nav.classList.remove(\"fixed-nav\");\r\n    }\r\n    this.oldScroll = this.scrollY;\r\n\r\n    //   sticky top header when user scrolls down\r\n    if (!nav.classList.contains(\"fixed-nav\") && scrollDepth > secondNavHeight) {\r\n      navHeader.classList.add(\"fixed-nav\");\r\n    } else {\r\n      navHeader.classList.remove(\"fixed-nav\");\r\n    }\r\n  };\r\n\r\n  //Remove background and filter when the filters are open and the user scrolls / clicks on the product card\r\n  const section = document.querySelectorAll(\"section\");\r\n  const closeFilter = () => {\r\n    if (pathname === \"/lister\") {\r\n      setActiveFilter(false);\r\n    }\r\n  };\r\n\r\n  window.addEventListener(\"scroll\", closeFilter);\r\n  section.forEach((section) => {\r\n    section.addEventListener(\"click\", closeFilter);\r\n  });\r\n\r\n  //adding sort by functionality\r\n  const [sort, setSort] = useState([\r\n    \"A-Z\",\r\n    \"Z-A\",\r\n    \"Height: High - Low\",\r\n    \"Height: Low - High\",\r\n    \"Difficulty: High - Low\",\r\n    \"Difficulty: Low - High\",\r\n  ]);\r\n\r\n  const handleSort = (sortOrder) => {\r\n    //taking in parameter of e.target.value\r\n    let result = [];\r\n    switch (sortOrder) {\r\n      case \"A-Z\":\r\n        result = mountains.sort((a, b) => {\r\n          if (a.name > b.name) {\r\n            console.log(a.name, b.name);\r\n            return 1;\r\n          } else {\r\n            return -1;\r\n          }\r\n        });\r\n        break;\r\n      // result = mountains.sort(); //shorthand for A-Z\r\n      case \"Z-A\":\r\n        result = mountains.sort((a, b) => {\r\n          if (a.name > b.name) {\r\n            console.log(a.name, b.name);\r\n            return -1;\r\n          } else {\r\n            return 1;\r\n          }\r\n        });\r\n        break;\r\n      // result = mountains.sort().reverse(); //shorthand for Z-A\r\n      case \"Height: High - Low\":\r\n        result = mountains.sort((a, b) => {\r\n          if (a.height > b.height) {\r\n            return -1;\r\n          } else {\r\n            return 1;\r\n          }\r\n        });\r\n        break;\r\n      case \"Height: Low - High\":\r\n        result = mountains.sort((a, b) => {\r\n          if (a.height > b.height) {\r\n            return 1;\r\n          } else {\r\n            return -1;\r\n          }\r\n        });\r\n        break;\r\n      case \"Difficulty: High - Low\":\r\n        result = mountains.sort((a, b) => a.difficulty > b.difficulty); //this is the shorthand when you're justing returning one thing\r\n        console.log(result);\r\n        break;\r\n      case \"Difficulty: Low - High\":\r\n        result = mountains.sort((a, b) => {\r\n          if (a.difficulty > b.difficulty) {\r\n            return 1;\r\n          } else {\r\n            return -1;\r\n          }\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    setData([...result]); //spreading creates a new instance which causes the App to re-render in a new order\r\n  };\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <nav className=\"nav\">\r\n        <div className=\"nav-header\">\r\n          <BackButton />\r\n          <Title className=\"title\" />\r\n          {isListerPage && (\r\n            <button className=\"nav-toggle menu-btn\" alt=\"nav toggle\">\r\n              <FaBars\r\n                className=\"fa-bars\"\r\n                onClick={() => setActiveFilter(!activeFilter)}\r\n              />\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        <Menu\r\n          mountains={mountains}\r\n          setData={setData}\r\n          activeFilter={activeFilter}\r\n          setActiveFilter={setActiveFilter}\r\n        />\r\n        {isListerPage && (\r\n          <div className=\"second-nav\">\r\n            <Search\r\n              mountains={mountains}\r\n              setData={setData}\r\n              searchString={searchString}\r\n              setSearchString={setSearchString}\r\n            />\r\n            <form className=\"sort-form\">\r\n              <label className=\"label\" htmlFor=\"cars\">\r\n                Sort\r\n              </label>\r\n              <select\r\n                name=\"sort\"\r\n                className=\"sort\"\r\n                onChange={(e) => handleSort(e.target.value)}\r\n              >\r\n                {sort.map((sort) => (\r\n                  <Sort key={sort} sort={sort} />\r\n                ))}\r\n              </select>\r\n            </form>\r\n          </div>\r\n        )}\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","const Footer = () => {\r\n  //dynamically add the date\r\n  const date = new Date().getFullYear(); //setting a date variable which can be used within HTML\r\n\r\n  return (\r\n    <div>\r\n      <footer class=\"footer\">\r\n        JM Development Inc&copy;.<span class=\"date\">{date} </span>{\" \"}\r\n      </footer>\r\n      <br />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","//best location for images is within the puiblic folder as react serves the public folder onto the local server.\r\n//We have access to these within components by using /FolderName/ImageName\r\n\r\nconst state = [\r\n  {\r\n    id: 0,\r\n    name: \"Arnison Crag\",\r\n    image: [\r\n      \"/Images/arnison.jpg\",\r\n      \"/Images/arnison 2.jpg\",\r\n      \"/Images/arnison 3.jpg\",\r\n    ],\r\n    imageNumber: 0,\r\n    region: \"Eastern\",\r\n    height: 1424,\r\n    averageTime: \"2 Hours\",\r\n    difficulty: \"2 / 5\",\r\n    complete: false,\r\n    climbers: \"\",\r\n    date: \"\",\r\n    startTime: \"\",\r\n    ascentTime: \"\",\r\n    summitTime: \"\",\r\n    views: \"\",\r\n    descentTime: \"\",\r\n    endTime: \"\",\r\n    totalWalkTime: \"\",\r\n  },\r\n  {\r\n    id: 1,\r\n    name: \"Blencathra\",\r\n    image: [\r\n      \"/Images/blencathra.jpg\",\r\n      \"/Images/blencathra 2.jpg\",\r\n      \"/Images/blencathra 3.jpg\",\r\n    ],\r\n    imageNumber: 0,\r\n    region: \"Northern\",\r\n    height: 2847,\r\n    averageTime: \"3-4 Hours\",\r\n    difficulty: \"4.5 / 5\",\r\n    complete: false,\r\n    climbers: \"\",\r\n    date: \"\",\r\n    startTime: \"\",\r\n    ascentTime: \"\",\r\n    summitTime: \"\",\r\n    views: \"\",\r\n    descentTime: \"\",\r\n    endTime: \"\",\r\n    totalWalkTime: \"\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Scafell Pike\",\r\n    image: [\r\n      \"/Images/scafell-pike.jpg\",\r\n      \"/Images/scafell-pike 2.jpg\",\r\n      \"/Images/scafell-pike 3.jpg\",\r\n    ],\r\n    imageNumber: 0,\r\n    region: \"Southern\",\r\n    height: 3210,\r\n    averageTime: \"4-5 Hours\",\r\n    difficulty: \"5 / 5\",\r\n    complete: false,\r\n    climbers: \"\",\r\n    date: \"\",\r\n    startTime: \"\",\r\n    ascentTime: \"\",\r\n    summitTime: \"\",\r\n    views: \"\",\r\n    descentTime: \"\",\r\n    endTime: \"\",\r\n    totalWalkTime: \"\",\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Yewbarrow\",\r\n    image: [\r\n      \"/Images/yewbarrow.jpg\",\r\n      \"/Images/yewbarrow 2.jpg\",\r\n      \"/Images/yewbarrow 3.jpg\",\r\n    ],\r\n    imageNumber: 0,\r\n    region: \"Western\",\r\n    height: 2058,\r\n    averageTime: \"2-3 Hours\",\r\n    difficulty: \"3.5 / 5\",\r\n    complete: false,\r\n    climbers: \"\",\r\n    date: \"\",\r\n    startTime: \"\",\r\n    ascentTime: \"\",\r\n    summitTime: \"\",\r\n    views: \"\",\r\n    descentTime: \"\",\r\n    endTime: \"\",\r\n    totalWalkTime: \"\",\r\n  },\r\n];\r\n\r\nexport default state;\r\n","import React from \"react\";\r\nimport { FaChevronLeft, FaChevronRight } from \"react-icons/fa\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst ListView = ({\r\n  mountains,\r\n  setData,\r\n  handleLeftClick,\r\n  handleRightClick,\r\n  activeFilter,\r\n  setActiveFilter,\r\n  handleClickThrough,\r\n}) => {\r\n  if (!mountains) {\r\n    return null; //this is a safety net to say if mountains doesn't exist return nothing\r\n  }\r\n\r\n  const handleComplete = (index) => {\r\n    const newData = mountains;\r\n    newData[index].complete = !newData[index].complete;\r\n    setData([...newData]);\r\n  };\r\n\r\n  return mountains.map((mountain, index) => (\r\n    <section className={mountain.name} id={mountain.name} key={mountain.id}>\r\n      <div\r\n        className={`mountain-border ${activeFilter && \"opaque-background\"}\r\n        ${mountain.complete === true ? \"show-mountain-border\" : \"\"}`}\r\n      >\r\n        <div className=\"name\">{mountain.name}</div>\r\n        {/* <ImageCarousel\r\n          mountain={mountain}\r\n          handleRightClick={handleRightClick}\r\n          index={index}\r\n        /> */}\r\n        <div className=\"image-container\">\r\n          <FaChevronLeft\r\n            id={`${mountain.name}-left`}\r\n            className=\"fas fa-angle-left\"\r\n            onClick={() => handleLeftClick(index)}\r\n          />\r\n          <img\r\n            src={mountain.image[mountain.imageNumber]}\r\n            id={`${mountain.name}-image`}\r\n            className=\"mountain-image\"\r\n            alt={` ${mountain.name}`}\r\n          />\r\n          <FaChevronRight\r\n            id={`${mountain.name}-right`}\r\n            className=\"fas fa-angle-right\"\r\n            onClick={() => handleRightClick(index)}\r\n          />\r\n        </div>\r\n        <div className=\"mountain-info\">\r\n          <ul>\r\n            <li className=\"mountain-region\">Region: {mountain.region}</li>\r\n            <li className=\"height\">Height (ft): {mountain.height}</li>\r\n            <li className=\"average-time\">\r\n              Average Walk Time: {mountain.averagetime}\r\n            </li>\r\n            <li className=\"difficulty stars\">\r\n              Difficulty: {mountain.difficulty}\r\n            </li>\r\n          </ul>\r\n          <div\r\n            className={mountain.complete ? \"incomplete btn\" : \"complete btn\"}\r\n            onClick={() => handleComplete(index)}\r\n          >\r\n            {mountain.complete ? \"Mark as Incomplete\" : \"Mark as Complete\"}\r\n          </div>\r\n          <Link\r\n            to=\"/pdp\"\r\n            className=\"more-info btn\"\r\n            onClick={() => handleClickThrough(index)}\r\n          >\r\n            Add More Info\r\n          </Link>\r\n        </div>\r\n      </div>\r\n      <br />\r\n      <hr className=\"seperator\" />\r\n    </section>\r\n  ));\r\n};\r\n\r\nexport default ListView;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <div class=\"container container-center\">\r\n      <img\r\n        src=\"/Images/homepage mobile.jpg\"\r\n        className=\"image\"\r\n        alt=\"mountains\"\r\n      />\r\n      <p className=\"homepage-title\">\r\n        Wainwright\r\n        <br /> Tracker\r\n      </p>\r\n      {/* Link prevents requests to the server and allows react to manage the routing */}\r\n      <Link to=\"/lister\" className=\"homepage-btn\">\r\n        Get Tracking\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import { React, useState } from \"react\";\r\nimport { FaChevronLeft, FaChevronRight } from \"react-icons/fa\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nconst MountainPage = ({ mountains, setData, selectedMountain }) => {\r\n  //console.log(selectedMountain);\r\n\r\n  const result = mountains.filter(\r\n    (mountain) => mountain.id === selectedMountain\r\n  );\r\n  //console.log(result);\r\n  //filter returns an array so results[0] is the mountain shown on the page. This then gets reassigned to pdpMountain\r\n  const pdpMountain = result[0];\r\n  console.log(pdpMountain);\r\n\r\n  const handleClimbEvents = (e, event) => {\r\n    switch (event) {\r\n      case \"climbers\":\r\n        setData((pdpMountain.climbers = e.target.value));\r\n        break;\r\n      case \"date\":\r\n        setData((pdpMountain.date = e.target.value));\r\n        break;\r\n      case \"startTime\":\r\n        setData((pdpMountain.startTime = e.target.value));\r\n        break;\r\n      case \"ascentTime\":\r\n        setData((pdpMountain.ascentTime = e.target.value));\r\n        handleAscentDuration();\r\n        break;\r\n      case \"summitTime\":\r\n        setData((pdpMountain.summitTime = e.target.value));\r\n        break;\r\n      case \"descentTime\":\r\n        setData((pdpMountain.descentTime = e.target.value));\r\n        handleDescentDuration();\r\n        handleTotalWalkTime();\r\n        break;\r\n      case \"finishTime\":\r\n        setData((pdpMountain.endTime = e.target.value));\r\n        break;\r\n      case \"totalWalkTime\":\r\n        setData((pdpMountain.totalWalkTime = e.target.value));\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleComplete = () => {\r\n    const newData = mountains;\r\n    pdpMountain.complete = !pdpMountain.complete;\r\n    setData([...newData]);\r\n  };\r\n\r\n  const handleAscentDuration = () => {\r\n    const newStartTime = pdpMountain.startTime;\r\n    const newAscentDuration = pdpMountain.ascentTime;\r\n\r\n    if (newStartTime !== null && newAscentDuration !== null) {\r\n      function convertNST(newStartTime) {\r\n        //console.log(newStartTime);\r\n        const arr = newStartTime.split(\":\");\r\n        //console.log(arr);\r\n        const seconds = arr[0] * 3600 + arr[1] * 60;\r\n        return seconds;\r\n      }\r\n      //console.log(convertNST(newStartTime));\r\n\r\n      function convertAD(newAscentDuration) {\r\n        const arr = newAscentDuration.split(\":\");\r\n        const seconds = arr[0] * 3600 + arr[1] * 60;\r\n        return seconds;\r\n      }\r\n      //console.log(convertAD(newAscentDuration));\r\n\r\n      const summitTimeCalc =\r\n        convertNST(newStartTime) + convertAD(newAscentDuration);\r\n      //console.log(summitTime);\r\n\r\n      var measuredTime = new Date(null);\r\n      measuredTime.setSeconds(summitTimeCalc); // specify value of SECONDS\r\n      var summitTimeString = measuredTime.toISOString().substr(11, 8);\r\n      var final = summitTimeString.slice(0, 5);\r\n      //console.log(summitTimeString);\r\n    }\r\n    setData((pdpMountain.summitTime = final));\r\n  };\r\n\r\n  const handleDescentDuration = (e) => {\r\n    const newSummitTime = pdpMountain.summitTime;\r\n    const newDescentDuration = pdpMountain.descentTime;\r\n\r\n    if (newSummitTime !== null && newDescentDuration !== null) {\r\n      function convertNST(newSummitTime) {\r\n        //console.log(newStartTime);\r\n        const arr = newSummitTime.split(\":\");\r\n        //console.log(arr);\r\n        const seconds = arr[0] * 3600 + arr[1] * 60;\r\n        return seconds;\r\n      }\r\n      //console.log(convertNST(newStartTime));\r\n\r\n      function convertAD(newDescentDuration) {\r\n        const arr = newDescentDuration.split(\":\");\r\n        const seconds = arr[0] * 3600 + arr[1] * 60;\r\n        return seconds;\r\n      }\r\n      //console.log(convertAD(newAscentDuration));\r\n\r\n      const finishTimeCalc =\r\n        convertNST(newSummitTime) + convertAD(newDescentDuration);\r\n      //console.log(summitTime);\r\n\r\n      var measuredTime = new Date(null);\r\n      measuredTime.setSeconds(finishTimeCalc); // specify value of SECONDS\r\n      var finishTimeString = measuredTime.toISOString().substr(11, 8);\r\n      //console.log(finishTimeString);\r\n    }\r\n    setData((pdpMountain.endTime = finishTimeString));\r\n  };\r\n\r\n  const handleTotalWalkTime = (e) => {\r\n    const newAscentDuration = pdpMountain.ascentTime;\r\n    const newDescentDuration = pdpMountain.descentTime;\r\n\r\n    if (newAscentDuration !== null && newDescentDuration !== null) {\r\n      function convertNST(newSummitTime) {\r\n        //console.log(newStartTime);\r\n        const arr = newAscentDuration.split(\":\");\r\n        //console.log(arr);\r\n        const seconds = arr[0] * 3600 + arr[1] * 60;\r\n        return seconds;\r\n      }\r\n      //console.log(convertNST(newAscentDuration));\r\n\r\n      function convertAD(newDescentDuration) {\r\n        const arr = newDescentDuration.split(\":\");\r\n        const seconds = arr[0] * 3600 + arr[1] * 60;\r\n        return seconds;\r\n      }\r\n      //console.log(convertAD(newDescentDuration));\r\n\r\n      const totalWalkTimeCalc =\r\n        convertNST(newAscentDuration) + convertAD(newDescentDuration);\r\n      //console.log(summitTime);\r\n\r\n      var measuredTime = new Date(null);\r\n      measuredTime.setSeconds(totalWalkTimeCalc); // specify value of SECONDS\r\n      var totalWalkTimeString = measuredTime.toISOString().substr(11, 8);\r\n      //console.log(totalWalkTimeString);\r\n    }\r\n    setData((pdpMountain.totalWalkTime = totalWalkTimeString));\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-section\">\r\n      <section className={`${pdpMountain.name}`}>\r\n        <div className=\"mountain-border\">\r\n          <div className=\"name\">{pdpMountain.name}</div>\r\n          <div className=\"image-container\">\r\n            <FaChevronLeft className=\"fas fa-angle-left\" />\r\n            <img\r\n              src={pdpMountain.image[0]}\r\n              className=\"mountain-image\"\r\n              alt={pdpMountain.name}\r\n            />\r\n            <FaChevronRight className=\"fas fa-angle-right\" />\r\n          </div>\r\n          <br />\r\n          <div className=\"mountain-info\">\r\n            <form className=\"pdp-form\">\r\n              <div className=\"climbers\">\r\n                <label className=\"centered-label pdp-label\">Climbers</label>\r\n                <div>\r\n                  <textarea\r\n                    className=\"input climber\"\r\n                    type=\"text\"\r\n                    placeholder=\"Who climbed this mountain?\"\r\n                    onChange={(e) => handleClimbEvents(e, \"climbers\")}\r\n                  ></textarea>\r\n                </div>\r\n              </div>\r\n              <div className=\"pdp-container\">\r\n                <div className=\"climbDate\">\r\n                  <label className=\"pdp-label\">Date</label>\r\n                  <input\r\n                    className=\"input climb-date\"\r\n                    type=\"date\"\r\n                    placeholder=\"Date Completed\"\r\n                    onChange={(e) => handleClimbEvents(e, \"date\")}\r\n                  />\r\n                </div>\r\n                <div className=\"start\">\r\n                  <label className=\"pdp-label\">Start Time</label>\r\n                  <input\r\n                    className=\"input start-time\"\r\n                    type=\"time\"\r\n                    placeholder=\"What time did you start?\"\r\n                    onChange={(e) => handleClimbEvents(e, \"startTime\")}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"pdp-container\">\r\n                <div className=\"ascent\">\r\n                  <label className=\"pdp-label\">Ascent Duration</label>\r\n                  <input\r\n                    className=\"input ascent-duration\"\r\n                    type=\"time\"\r\n                    placeholder=\"How long did the ascent take?\"\r\n                    onChange={(e) => handleClimbEvents(e, \"ascentTime\")}\r\n                  />\r\n                </div>\r\n                <div className=\"summit\">\r\n                  <label className=\"pdp-label\">Summit Time</label>\r\n                  <input\r\n                    className=\"input summit-time\"\r\n                    type=\"time\"\r\n                    placeholder=\"How long did the ascent take?\"\r\n                    onChange={(e) => handleClimbEvents(e, \"summitTime\")}\r\n                    value={handleAscentDuration}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"views\">\r\n                <label className=\"centered-label pdp-label\">Views</label>\r\n                <div>\r\n                  <textarea\r\n                    className=\"input view\"\r\n                    type=\"text\"\r\n                    placeholder=\"What other peaks can you see?\"\r\n                    onChange={(e) => {\r\n                      handleClimbEvents(e, \"views\");\r\n                    }}\r\n                  ></textarea>\r\n                </div>\r\n              </div>\r\n              <div className=\"pdp-container\">\r\n                <div className=\"descent\">\r\n                  <label className=\"pdp-label\">Decent Duration</label>\r\n                  <input\r\n                    className=\"input descent-duration\"\r\n                    type=\"time\"\r\n                    placeholder=\"How long did the ascent take?\"\r\n                    onChange={(e) => {\r\n                      handleClimbEvents(e, \"descentTime\");\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"finish\">\r\n                  <label className=\"pdp-label\">Finish Time</label>\r\n                  <input\r\n                    className=\"input finish-time\"\r\n                    type=\"time\"\r\n                    placeholder=\"How long did the ascent take?\"\r\n                    onChange={(e) => {\r\n                      handleClimbEvents(e, \"endTime\");\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"total\">\r\n                <label className=\"pdp-label\">Total Walk Time</label>\r\n                <input\r\n                  className=\"input total-time\"\r\n                  type=\"time\"\r\n                  placeholder=\"How long did the ascent take?\"\r\n                  onChange={(e) => {\r\n                    handleClimbEvents(e, \"totalWalkTime\");\r\n                  }}\r\n                />\r\n              </div>\r\n              <div\r\n                className={\r\n                  pdpMountain.complete ? \"incomplete btn\" : \"complete btn\"\r\n                }\r\n                onClick={() => handleComplete()}\r\n              >\r\n                {pdpMountain.complete\r\n                  ? \"Mark as Incomplete\"\r\n                  : \"Mark as Complete\"}\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MountainPage;\r\n","import Header from \"./Components/Lister/Header/Header\";\r\nimport { useState } from \"react\";\r\nimport Footer from \"./Components/Lister/Footer/Footer\";\r\nimport state from \"./State/State\";\r\nimport ListView from \"./Components/Lister/ListView/ListView\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport HomePage from \"./Components/HomePage/HomePage\";\r\nimport MountainPage from \"./Components/PDP/MountainPage\";\r\n\r\nfunction App() {\r\n  const [mountains, setData] = useState(state);\r\n  const [filteredMountains, setFilteredMountains] = useState(state);\r\n  const [activeFilter, setActiveFilter] = useState(false);\r\n  const [selectedMountain, setSelectedMountain] = useState(0);\r\n\r\n  const handleRightClick = (index) => {\r\n    const mountain = mountains[index];\r\n    console.log(mountain.id, index);\r\n    if (\r\n      mountain.id === index &&\r\n      mountain.imageNumber < mountain.image.length - 1\r\n    ) {\r\n      let newData = mountains;\r\n      newData[index].imageNumber = newData[index].imageNumber + 1;\r\n      console.log(newData[index].image);\r\n      setData([...newData]); //spreading creates a new instance which causes the App to re-render in a new order. This fixes the issue when the page only renders on re-saving\r\n      // setImageNumber((imgNum) => ++imgNum);//use index + 1 or arrow function with the ++ applied pre\r\n      console.log(newData[index].imageNumber);\r\n    } else {\r\n      let newData = mountains;\r\n      newData[index].imageNumber = newData[index].imageNumber = 0;\r\n      setData([...newData]);\r\n    }\r\n  };\r\n\r\n  const handleLeftClick = (index) => {\r\n    const mountain = mountains[index];\r\n    console.log(mountain.id, index);\r\n    if (mountain.id === index && mountain.imageNumber > 0) {\r\n      let newData = mountains;\r\n      newData[index].imageNumber = newData[index].imageNumber - 1;\r\n      console.log(newData[index].image);\r\n      setData([...newData]); //spreading creates a new instance which causes the App to re-render in a new order. This fixes the issue when the page only renders on re-saving\r\n      // setImageNumber((imgNum) => ++imgNum);//use index + 1 or arrow function with the ++ applied pre\r\n      console.log(newData[index].imageNumber);\r\n    } else {\r\n      let newData = mountains;\r\n      newData[index].imageNumber = mountains[index].image.length - 1;\r\n      setData([...newData]);\r\n    }\r\n  };\r\n\r\n  const handleClickThrough = (index) => {\r\n    //grabbing the index which is selected and passing down as props lower down\r\n    setSelectedMountain(index);\r\n    // console.log(selectedMountain);\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <HomePage />\r\n          </Route>\r\n          <Route exact path=\"/lister\">\r\n            <Header\r\n              mountains={mountains}\r\n              setData={setFilteredMountains}\r\n              setActiveFilter={setActiveFilter}\r\n              activeFilter={activeFilter}\r\n            />\r\n            <ListView\r\n              mountains={filteredMountains}\r\n              setData={setFilteredMountains}\r\n              handleLeftClick={handleLeftClick}\r\n              handleRightClick={handleRightClick}\r\n              setActiveFilter={setActiveFilter}\r\n              activeFilter={activeFilter}\r\n              handleClickThrough={handleClickThrough}\r\n            />\r\n            <Footer />\r\n          </Route>\r\n          <Route exact path=\"/pdp\">\r\n            <Header />\r\n            <MountainPage\r\n              mountains={mountains}\r\n              setData={setFilteredMountains}\r\n              selectedMountain={selectedMountain}\r\n              setActiveFilter={setActiveFilter}\r\n            />\r\n            <Footer />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}